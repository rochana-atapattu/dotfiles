#!/usr/bin/env bash

set -Eeuo pipefail
trap cleanup SIGINT SIGTERM ERR EXIT

usage() {
  cat << EOF
Usage: $(basename "${BASH_SOURCE[0]}") [-h] [-v] [-l] repository

Clone a bare git repo and set up environment for working comfortably and exclusively from worktrees.

Available options:

-h, --help      Print this help and exit
-v, --verbose   Print script debug info
-l, --location  Location of the bare repo contents (default: based on CODE_DIR or current directory and includes org name)
EOF
  exit
}

cleanup() {
  trap - SIGINT SIGTERM ERR EXIT
  # Your cleanup code here
}

setup_colors() {
  if [[ -t 2 ]] && [[ -z "${NO_COLOR-}" ]] && [[ "${TERM-}" != "dumb" ]]; then
    NOFORMAT='\033[0m' RED='\033[0;31m' GREEN='\033[0;32m' ORANGE='\033[0;33m' BLUE='\033[0;34m' PURPLE='\033[0;35m' CYAN='\033[0;36m' YELLOW='\033[1;33m'
  else
    NOFORMAT='' RED='' GREEN='' ORANGE='' BLUE='' PURPLE='' CYAN='' YELLOW=''
  fi
}

msg() {
  echo >&2 -e "${1-}"
}

die() {
  local msg=$1
  local code=${2-1} # default exit status 1
  msg "$msg"
  exit "$code"
}

parse_params() {
  location='' # Default location is now empty, will be set later

  while :; do
    case "${1-}" in
    -h | --help) usage ;;
    -v | --verbose) set -x ;;
    --no-color) NO_COLOR=1 ;;
    -l | --location)
        location="${2-}"
        shift
        ;;
    -?*) die "Unknown option: $1" ;;
    *) break ;;
    esac
    shift
  done

  args=("$@")

  [[ ${#args[@]} -eq 0 ]] && die "Missing script arguments"

  if [[ -z "$location" ]]; then
    # Determine the base directory: use CODE_DIR if set, otherwise use current directory
    local base_dir="${CODE_DIR:-$(pwd)}"
    # Extract org and repo name from the URL
    local repo_url="${args[0]}"
    local repo_path=$(echo "$repo_url" | sed -E 's/.*[:\/](.+\/.+)\.git/\1/')
    location="$base_dir/$repo_path/.git"
  fi

  return 0
}

parse_params "$@"
setup_colors

# Ensure the directory exists before cloning
if [[ ! -d "$location" ]]; then
  msg "${YELLOW}Creating directory $location...${NOFORMAT}"
  mkdir -p "$location"
fi

msg "${YELLOW}Cloning bare repository to $location...${NOFORMAT}"
git clone --bare "${args[0]}" "$location"
pushd "$location" > /dev/null
msg "${YELLOW}Adjusting origin fetch locations...${NOFORMAT}"
git config remote.origin.fetch "+refs/heads/*:refs/remotes/origin/*"
popd > /dev/null
msg "${YELLOW}Setting .git file contents...${NOFORMAT}"
echo "gitdir: ./$location" > .git
msg "${GREEN}Success.${NOFORMAT}"
